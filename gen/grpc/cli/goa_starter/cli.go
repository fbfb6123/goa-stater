// Code generated by goa v3.4.3, DO NOT EDIT.
//
// goa_starter gRPC client CLI support package
//
// Command:
// $ goa gen goa_starter/design

package cli

import (
	"flag"
	"fmt"
	goastarterc "goa_starter/gen/grpc/goa_starter/client"
	termlimitc "goa_starter/gen/grpc/term_limit/client"
	"os"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `goa-starter add
term-limit add
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` goa-starter add --message '{
      "a": 5121140462866214315,
      "b": 2783468530862518908
   }'` + "\n" +
		os.Args[0] + ` term-limit add --message '{
      "c": 8428770013074316282,
      "d": 7396536983462351961
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, interface{}, error) {
	var (
		goaStarterFlags = flag.NewFlagSet("goa-starter", flag.ContinueOnError)

		goaStarterAddFlags       = flag.NewFlagSet("add", flag.ExitOnError)
		goaStarterAddMessageFlag = goaStarterAddFlags.String("message", "", "")

		termLimitFlags = flag.NewFlagSet("term-limit", flag.ContinueOnError)

		termLimitAddFlags       = flag.NewFlagSet("add", flag.ExitOnError)
		termLimitAddMessageFlag = termLimitAddFlags.String("message", "", "")
	)
	goaStarterFlags.Usage = goaStarterUsage
	goaStarterAddFlags.Usage = goaStarterAddUsage

	termLimitFlags.Usage = termLimitUsage
	termLimitAddFlags.Usage = termLimitAddUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "goa-starter":
			svcf = goaStarterFlags
		case "term-limit":
			svcf = termLimitFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "goa-starter":
			switch epn {
			case "add":
				epf = goaStarterAddFlags

			}

		case "term-limit":
			switch epn {
			case "add":
				epf = termLimitAddFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "goa-starter":
			c := goastarterc.NewClient(cc, opts...)
			switch epn {
			case "add":
				endpoint = c.Add()
				data, err = goastarterc.BuildAddPayload(*goaStarterAddMessageFlag)
			}
		case "term-limit":
			c := termlimitc.NewClient(cc, opts...)
			switch epn {
			case "add":
				endpoint = c.Add()
				data, err = termlimitc.BuildAddPayload(*termLimitAddMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// goa-starterUsage displays the usage of the goa-starter command and its
// subcommands.
func goaStarterUsage() {
	fmt.Fprintf(os.Stderr, `The goa_starter service performs operations on numbers.
Usage:
    %s [globalflags] goa-starter COMMAND [flags]

COMMAND:
    add: Add implements add.

Additional help:
    %s goa-starter COMMAND --help
`, os.Args[0], os.Args[0])
}
func goaStarterAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] goa-starter add -message JSON

Add implements add.
    -message JSON: 

Example:
    `+os.Args[0]+` goa-starter add --message '{
      "a": 5121140462866214315,
      "b": 2783468530862518908
   }'
`, os.Args[0])
}

// term-limitUsage displays the usage of the term-limit command and its
// subcommands.
func termLimitUsage() {
	fmt.Fprintf(os.Stderr, `The term_limit service performs operations on numbers.
Usage:
    %s [globalflags] term-limit COMMAND [flags]

COMMAND:
    add: Add implements add.

Additional help:
    %s term-limit COMMAND --help
`, os.Args[0], os.Args[0])
}
func termLimitAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] term-limit add -message JSON

Add implements add.
    -message JSON: 

Example:
    `+os.Args[0]+` term-limit add --message '{
      "c": 8428770013074316282,
      "d": 7396536983462351961
   }'
`, os.Args[0])
}
