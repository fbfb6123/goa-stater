// Code generated by goa v3.4.3, DO NOT EDIT.
//
// goa_starter-calc gRPC client encoders and decoders
//
// Command:
// $ goa gen goa_starter/design

package client

import (
	"context"
	goastartercalc "goa_starter/gen/goa_starter_calc"
	goa_starter_calcpb "goa_starter/gen/grpc/goa_starter_calc/pb"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildAddFunc builds the remote method to invoke for "goa_starter-calc"
// service "add" endpoint.
func BuildAddFunc(grpccli goa_starter_calcpb.GoaStarterCalcClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Add(ctx, reqpb.(*goa_starter_calcpb.AddRequest), opts...)
		}
		return grpccli.Add(ctx, &goa_starter_calcpb.AddRequest{}, opts...)
	}
}

// EncodeAddRequest encodes requests sent to goa_starter-calc add endpoint.
func EncodeAddRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*goastartercalc.AddPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("goa_starter-calc", "add", "*goastartercalc.AddPayload", v)
	}
	return NewAddRequest(payload), nil
}

// DecodeAddResponse decodes responses from the goa_starter-calc add endpoint.
func DecodeAddResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*goa_starter_calcpb.AddResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("goa_starter-calc", "add", "*goa_starter_calcpb.AddResponse", v)
	}
	res := NewAddResult(message)
	return res, nil
}
