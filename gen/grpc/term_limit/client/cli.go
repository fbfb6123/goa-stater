// Code generated by goa v3.4.3, DO NOT EDIT.
//
// term_limit gRPC client CLI support package
//
// Command:
// $ goa gen goa_starter/design

package client

import (
	"encoding/json"
	"fmt"
	term_limitpb "goa_starter/gen/grpc/term_limit/pb"
	termlimit "goa_starter/gen/term_limit"
)

// BuildGetPayload builds the payload for the term_limit get endpoint from CLI
// flags.
func BuildGetPayload(termLimitGetMessage string) (*termlimit.GetPayload, error) {
	var err error
	var message term_limitpb.GetRequest
	{
		if termLimitGetMessage != "" {
			err = json.Unmarshal([]byte(termLimitGetMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": 8786081763742979290,\n      \"media_id\": 4635224356953494713,\n      \"muid\": \"Quia quas expedita nam ex.\"\n   }'")
			}
		}
	}
	v := &termlimit.GetPayload{
		ID:      int(message.Id),
		Muid:    message.Muid,
		MediaID: message.MediaId,
	}

	return v, nil
}
