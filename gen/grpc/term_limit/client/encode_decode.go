// Code generated by goa v3.4.3, DO NOT EDIT.
//
// term_limit gRPC client encoders and decoders
//
// Command:
// $ goa gen goa_starter/design

package client

import (
	"context"
	term_limitpb "goa_starter/gen/grpc/term_limit/pb"
	termlimit "goa_starter/gen/term_limit"
	termlimitviews "goa_starter/gen/term_limit/views"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildGetFunc builds the remote method to invoke for "term_limit" service
// "get" endpoint.
func BuildGetFunc(grpccli term_limitpb.TermLimitClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Get(ctx, reqpb.(*term_limitpb.GetRequest), opts...)
		}
		return grpccli.Get(ctx, &term_limitpb.GetRequest{}, opts...)
	}
}

// EncodeGetRequest encodes requests sent to term_limit get endpoint.
func EncodeGetRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*termlimit.GetPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("term_limit", "get", "*termlimit.GetPayload", v)
	}
	return NewGetRequest(payload), nil
}

// DecodeGetResponse decodes responses from the term_limit get endpoint.
func DecodeGetResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*term_limitpb.GetResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("term_limit", "get", "*term_limitpb.GetResponse", v)
	}
	res := NewGetResult(message)
	vres := &termlimitviews.TermLimitResponse{Projected: res, View: view}
	if err := termlimitviews.ValidateTermLimitResponse(vres); err != nil {
		return nil, err
	}
	return termlimit.NewTermLimitResponse(vres), nil
}
