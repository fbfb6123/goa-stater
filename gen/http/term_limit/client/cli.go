// Code generated by goa v3.4.3, DO NOT EDIT.
//
// term_limit HTTP client CLI support package
//
// Command:
// $ goa gen goa_starter/design

package client

import (
	"encoding/json"
	"fmt"
	termlimit "goa_starter/gen/term_limit"
	"strconv"
)

// BuildGetPayload builds the payload for the term_limit get endpoint from CLI
// flags.
func BuildGetPayload(termLimitGetBody string, termLimitGetMuid string, termLimitGetMediaID string) (*termlimit.GetPayload, error) {
	var err error
	var body GetRequestBody
	{
		err = json.Unmarshal([]byte(termLimitGetBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": 36983429280391996\n   }'")
		}
	}
	var muid string
	{
		muid = termLimitGetMuid
	}
	var mediaID uint64
	{
		mediaID, err = strconv.ParseUint(termLimitGetMediaID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for mediaID, must be UINT64")
		}
	}
	v := &termlimit.GetPayload{
		ID: body.ID,
	}
	v.Muid = muid
	v.MediaID = mediaID

	return v, nil
}
