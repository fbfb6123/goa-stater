// Code generated by goa v3.4.3, DO NOT EDIT.
//
// term_limit HTTP server encoders and decoders
//
// Command:
// $ goa gen goa_starter/design

package server

import (
	"context"
	termlimitviews "goa_starter/gen/term_limit/views"
	"io"
	"net/http"
	"strconv"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetResponse returns an encoder for responses returned by the
// term_limit get endpoint.
func EncodeGetResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*termlimitviews.TermLimitResponse)
		enc := encoder(ctx, w)
		body := NewGetResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetRequest returns a decoder for requests sent to the term_limit get
// endpoint.
func DecodeGetRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body GetRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateGetRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			muid    string
			mediaID uint64
		)
		muid = r.URL.Query().Get("muid")
		if muid == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("muid", "query string"))
		}
		{
			mediaIDRaw := r.URL.Query().Get("media_id")
			if mediaIDRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("media_id", "query string"))
			}
			v, err2 := strconv.ParseUint(mediaIDRaw, 10, 64)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("mediaID", mediaIDRaw, "unsigned integer"))
			}
			mediaID = v
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetPayload(&body, muid, mediaID)

		return payload, nil
	}
}
