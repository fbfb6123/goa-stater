// Code generated by goa v3.4.3, DO NOT EDIT.
//
// term_limit views
//
// Command:
// $ goa gen goa_starter/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// TermLimitResponse is the viewed result type that is projected based on a
// view.
type TermLimitResponse struct {
	// Type to project
	Projected *TermLimitResponseView
	// View to render
	View string
}

// TermLimitResponseView is a type that runs validations on a projected type.
type TermLimitResponseView struct {
	ID      *uint64
	OfferID *uint64
	Status  *uint64
}

var (
	// TermLimitResponseMap is a map of attribute names in result type
	// TermLimitResponse indexed by view name.
	TermLimitResponseMap = map[string][]string{
		"default": []string{
			"id",
			"offer_id",
			"status",
		},
	}
)

// ValidateTermLimitResponse runs the validations defined on the viewed result
// type TermLimitResponse.
func ValidateTermLimitResponse(result *TermLimitResponse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateTermLimitResponseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateTermLimitResponseView runs the validations defined on
// TermLimitResponseView using the "default" view.
func ValidateTermLimitResponseView(result *TermLimitResponseView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.OfferID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("offer_id", "result"))
	}
	if result.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "result"))
	}
	return
}
