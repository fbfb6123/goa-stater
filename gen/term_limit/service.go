// Code generated by goa v3.4.3, DO NOT EDIT.
//
// term_limit service
//
// Command:
// $ goa gen goa_starter/design

package termlimit

import (
	"context"
	termlimitviews "goa_starter/gen/term_limit/views"
)

// OW表示可能一覧取得
type Service interface {
	// Get implements get.
	Get(context.Context, *GetPayload) (res *TermLimitResponse, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "term_limit"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"get"}

// GetPayload is the payload type of the term_limit service get method.
type GetPayload struct {
	// term_limit のID
	ID int
	// MUID
	Muid string
	// メディアID
	MediaID uint64
}

// TermLimitResponse is the result type of the term_limit service get method.
type TermLimitResponse struct {
	ID      uint64
	OfferID uint64
	Status  uint64
}

// NewTermLimitResponse initializes result type TermLimitResponse from viewed
// result type TermLimitResponse.
func NewTermLimitResponse(vres *termlimitviews.TermLimitResponse) *TermLimitResponse {
	return newTermLimitResponse(vres.Projected)
}

// NewViewedTermLimitResponse initializes viewed result type TermLimitResponse
// from result type TermLimitResponse using the given view.
func NewViewedTermLimitResponse(res *TermLimitResponse, view string) *termlimitviews.TermLimitResponse {
	p := newTermLimitResponseView(res)
	return &termlimitviews.TermLimitResponse{Projected: p, View: "default"}
}

// newTermLimitResponse converts projected type TermLimitResponse to service
// type TermLimitResponse.
func newTermLimitResponse(vres *termlimitviews.TermLimitResponseView) *TermLimitResponse {
	res := &TermLimitResponse{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.OfferID != nil {
		res.OfferID = *vres.OfferID
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	return res
}

// newTermLimitResponseView projects result type TermLimitResponse to projected
// type TermLimitResponseView using the "default" view.
func newTermLimitResponseView(res *TermLimitResponse) *termlimitviews.TermLimitResponseView {
	vres := &termlimitviews.TermLimitResponseView{
		ID:      &res.ID,
		OfferID: &res.OfferID,
		Status:  &res.Status,
	}
	return vres
}
